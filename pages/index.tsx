import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { TimelineCard } from '../components/organisms/TimelineCard';
import { gql, ApolloClient, InMemoryCache } from '@apollo/client';
import { GraphQLNotes, Note } from './notes/Notes.types';

const NOTES = gql`
    query getNotes {
        notes {
            data {
                id
                attributes {
                    title
                    createdAt
                    tag {
                        data {
                            attributes {
                                title
                            }
                        }
                    }
                    specific_tag {
                        data {
                            attributes {
                                title
                            }
                        }
                    }
                    author {
                        data {
                            attributes {
                                title
                            }
                        }
                    }
                    source {
                        data {
                            attributes {
                                title
                            }
                        }
                    }
                    action {
                        data {
                            attributes {
                                action
                            }
                        }
                    }
                }
            }
        }
    }
`;

const Home: NextPage<{ data: any; loading: any }> = ({ data, loading }) => {
    if (!loading) {
        data = data.notes.data;
    }

    console.log('#debug inside raw data', data);

    const filteredData: Note[] = data.map((item: GraphQLNotes) => {
        const container: Note = {
            id: 0,
            createdAt: null,
            title: '',
            tag: '',
            specificTag: '',
            author: '',
            source: '',
            action: '',
        };

        container.author = item.attributes.author.data.attributes.title;
        container.createdAt = item.attributes.createdAt;
        container.id = item.id;
        container.source = item.attributes.source.data.attributes.title;
        container.specificTag =
            item.attributes.specific_tag.data.attributes.title;
        container.tag = item.attributes.tag.data.attributes.title;
        container.title = item.attributes.title;
        container.action = item.attributes.action.data.attributes.action;

        return container;
    });

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <main className={styles.main}>
                <TimelineCard data={filteredData}></TimelineCard>
            </main>
        </div>
    );
};

export const getStaticProps: GetStaticProps = async () => {
    const client = new ApolloClient({
        uri: 'http://localhost:1337/graphql',
        cache: new InMemoryCache(),
    });

    const { loading, data } = await client.query({ query: NOTES });

    return {
        props: {
            data,
            loading,
        },
    };
};

export default Home;
